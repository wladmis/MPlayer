diff -urN MPlayer-1.0pre4.orig/libmpcodecs/vd_qtvideo.c MPlayer-1.0pre4/libmpcodecs/vd_qtvideo.c
--- MPlayer-1.0pre4.orig/libmpcodecs/vd_qtvideo.c	2004-04-13 21:48:31 +0700
+++ MPlayer-1.0pre4/libmpcodecs/vd_qtvideo.c	2004-05-01 23:11:19 +0700
@@ -144,7 +144,7 @@
 
     result=InitializeQTML(6+16);
 //    result=InitializeQTML(0);
-    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"InitializeQTML returned %i\n",result);
+    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"InitializeQTML returned %li\n",result);
 //    result=EnterMovies();
 //    printf("EnterMovies->%d\n",result);
 #endif /* !MACOSX */
@@ -185,24 +185,24 @@
     desc.componentFlags=0;
     desc.componentFlagsMask=0;
 
-    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"Count = %d\n",CountComponents(&desc));
+    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"Count = %ld\n",CountComponents(&desc));
     prev=FindNextComponent(NULL,&desc);
     if(!prev){
 	mp_msg(MSGT_DECVIDEO,MSGL_ERR,"Cannot find requested component\n");
 	return(0);
     }
-    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"Found it! ID = 0x%X\n",prev);
+    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"Found it! ID = %p\n",prev);
 
     ci=OpenComponent(prev);
     mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"ci=%p\n",ci);
 
     memset(&icap,0,sizeof(icap));
     cres=ImageCodecInitialize(ci,&icap);
-    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"ImageCodecInitialize->%p  size=%d (%d)\n",cres,icap.recordSize,icap.decompressRecordSize);
+    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"ImageCodecInitialize->%#lx  size=%ld (%ld)\n",cres,icap.recordSize,icap.decompressRecordSize);
     
     memset(&cinfo,0,sizeof(cinfo));
     cres=ImageCodecGetCodecInfo(ci,&cinfo);
-    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"Flags: compr: 0x%X  decomp: 0x%X format: 0x%X\n",
+    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"Flags: compr: 0x%lX  decomp: 0x%lX format: 0x%lX\n",
 	cinfo.compressFlags, cinfo.decompressFlags, cinfo.formatFlags);
     mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"Codec name: %.*s\n",((unsigned char*)&cinfo.typeName)[0],
 	((unsigned char*)&cinfo.typeName)+1);
@@ -225,7 +225,7 @@
 }
 #else
     if(!sh->ImageDesc) sh->ImageDesc=(sh->bih+1); // hack for SVQ3-in-AVI
-    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"ImageDescription size: %d\n",((ImageDescription*)(sh->ImageDesc))->idSize);
+    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"ImageDescription size: %ld\n",((ImageDescription*)(sh->ImageDesc))->idSize);
     framedescHandle=(ImageDescriptionHandle)NewHandleClear(((ImageDescription*)(sh->ImageDesc))->idSize);
     memcpy(*framedescHandle,sh->ImageDesc,((ImageDescription*)(sh->ImageDesc))->idSize);
     dump_ImageDescription(*framedescHandle);
@@ -234,7 +234,7 @@
 //    result = FindCodec ('SVQ1',anyCodec,&compressor,&decompressor );                 
 //    printf("FindCodec SVQ1 returned:%i compressor: 0x%X decompressor: 0x%X\n",result,compressor,decompressor);
 
-    sh->context = kYUVSPixelFormat;
+    sh->context = (void *)kYUVSPixelFormat;
 #if 1
     {
 	int imgfmt = sh->codec->outfmt[sh->outfmtidx];
@@ -273,8 +273,8 @@
 	    mp_msg(MSGT_DECVIDEO,MSGL_ERR,"Unknown requested csp\n");
 	    return(0);    
     }
-    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"imgfmt: %s qt_imgfmt: %.4s\n", vo_format_name(imgfmt), &qt_imgfmt);
-    sh->context = qt_imgfmt;
+    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"imgfmt: %s qt_imgfmt: %.4s\n", vo_format_name(imgfmt), (char *)&qt_imgfmt);
+    sh->context = (void *)qt_imgfmt;
     if(!mpcodecs_config_vo(sh,sh->disp_w,sh->disp_h,imgfmt)) return 0;
     }
 #else
@@ -312,14 +312,14 @@
     result = QTNewGWorldFromPtr(
         &OutBufferGWorld,  
 //        kYUVSPixelFormat, //pixel format of new GWorld == YUY2
-	sh->context,
+	(OSType)sh->context,
         &OutBufferRect,   //we should benchmark if yvu9 is faster for svq3, too
         0, 
         0, 
         0, 
         mpi->planes[0],
         mpi->stride[0]);
-    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"NewGWorldFromPtr returned:%d\n",65536-(result&0xffff));
+    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"NewGWorldFromPtr returned:%d\n",(int)(65536-(result&0xffff)));
 //    if (65536-(result&0xFFFF) != 10000)
 //	return NULL;
 
@@ -355,12 +355,12 @@
     decpar.dstPixMap = **GetGWorldPixMap( OutBufferGWorld);//destPixmap; 
   
     cres=ImageCodecPreDecompress(ci,&decpar);
-    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"ImageCodecPreDecompress cres=0x%X\n",cres);
+    mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"ImageCodecPreDecompress cres=0x%lX\n",cres);
     
     if(decpar.wantedDestinationPixelTypes)
     { OSType *p=*(decpar.wantedDestinationPixelTypes);
       if(p) while(*p){
-          mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"supported csp: 0x%08X %.4s\n",*p,p);
+	      mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"supported csp: 0x%08X %.4s\n",*p,(char *)p);
 	  ++p;
       }
     }
@@ -382,7 +382,7 @@
     if(decpar.frameNumber==124){
 	decpar.frameNumber=1;
 	cres=ImageCodecPreDecompress(ci,&decpar);
-	mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"ImageCodecPreDecompress cres=0x%X\n",cres);
+	mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"ImageCodecPreDecompress cres=0x%lX\n",cres);
     }
 #endif
 
@@ -391,7 +391,7 @@
     ++decpar.frameNumber;
 
     if(cres&0xFFFF){
-	mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"ImageCodecBandDecompress cres=0x%X (-0x%X) %d\n",cres,-cres,cres);
+	mp_msg(MSGT_DECVIDEO,MSGL_DBG2,"ImageCodecBandDecompress cres=0x%lX (-0x%lX) %ld\n",cres,-cres,cres);
 	return NULL;
     }
     
diff -urN MPlayer-1.0pre4.orig/libmpcodecs/ve_qtvideo.c MPlayer-1.0pre4/libmpcodecs/ve_qtvideo.c
--- MPlayer-1.0pre4.orig/libmpcodecs/ve_qtvideo.c	2004-04-13 22:04:25 +0700
+++ MPlayer-1.0pre4/libmpcodecs/ve_qtvideo.c	2004-05-01 23:15:51 +0700
@@ -145,13 +145,13 @@
     cdesc.componentFlagsMask=0;
 
 
-    mp_msg(MSGT_MENCODER,MSGL_DBG2,"Count = %d\n",CountComponents(&cdesc));
+    mp_msg(MSGT_MENCODER,MSGL_DBG2,"Count = %ld\n",CountComponents(&cdesc));
     compressor=FindNextComponent(NULL,&cdesc);
     if(!compressor){
 	mp_msg(MSGT_MENCODER,MSGL_ERR,"Cannot find requested component\n");
 	return(0);
     }
-    mp_msg(MSGT_MENCODER,MSGL_DBG2,"Found it! ID = 0x%X\n",compressor);
+    mp_msg(MSGT_MENCODER,MSGL_DBG2,"Found it! ID = %p\n",compressor);
 
 //	cres= FindCodec (fourcc,anyCodec,&compressor,&decompressor );
 //	printf("FindCodec returned:%i compressor: 0x%X decompressor: 0x%X\n",cres&0xFFFF,compressor,decompressor);
@@ -177,7 +177,7 @@
     long framesizemax;
     UInt8 similarity=0;
     long compressedsize;
-    int in_format=kYUVSPixelFormat;
+    OSType in_format=kYUVSPixelFormat;
     int width = mpi->width;
     int height = mpi->height;
     int stride = width*2;
@@ -195,7 +195,7 @@
         0,
         mpi->planes[0],
         stride);
-    mp_msg(MSGT_MENCODER,MSGL_DBG2,"NewGWorldFromPtr returned:%i\n",cres&0xFFFF);
+    mp_msg(MSGT_MENCODER,MSGL_DBG2,"NewGWorldFromPtr returned:%i\n",(int)(cres&0xFFFF));
     //dunno what todo about this
     frame_prev = malloc(stride * height);
     cres = QTNewGWorldFromPtr(
@@ -208,7 +208,7 @@
         frame_prev,
         stride);
     mp_msg(MSGT_MENCODER,MSGL_DBG2,"height:%i width:%i stride:%i\n",height,width,stride);
-    mp_msg(MSGT_MENCODER,MSGL_DBG2,"NewGWorldFromPtr returned:%i\n",cres&0xFFFF);
+    mp_msg(MSGT_MENCODER,MSGL_DBG2,"NewGWorldFromPtr returned:%i\n",(int)(cres&0xFFFF));
     cres=  GetMaxCompressionSize (
        GetGWorldPixMap(frame_GWorld_in),
        &FrameRect,
@@ -217,7 +217,7 @@
        bswap_32(format),
        compressor,
        &framesizemax );
-    mp_msg(MSGT_MENCODER,MSGL_DBG2,"GetMaxCompressionSize returned:%i : MaxSize:%i\n",cres&0xFFFF,framesizemax);
+    mp_msg(MSGT_MENCODER,MSGL_DBG2,"GetMaxCompressionSize returned:%i : MaxSize:%i\n",(int)(cres&0xFFFF),framesizemax);
     frame_comp=malloc(framesizemax);
 
     desc = (ImageDescriptionHandle)NewHandleClear(MAX_IDSIZE); //memory where the desc will be stored
@@ -238,8 +238,8 @@
        0,
        0,
        desc);
-    mp_msg(MSGT_MENCODER,MSGL_DBG2,"CompressSequenceBegin returned:%i\n",cres&0xFFFF);
-    mp_msg(MSGT_MENCODER,MSGL_DBG2,"Sequence ID:%i\n",seq);
+    mp_msg(MSGT_MENCODER,MSGL_DBG2,"CompressSequenceBegin returned:%i\n",(int)(cres&0xFFFF));
+    mp_msg(MSGT_MENCODER,MSGL_DBG2,"Sequence ID:%li\n",seq);
 
     dump_ImageDescription(*desc);
     codec_inited++;
@@ -254,7 +254,7 @@
         &similarity,
         0);
 
-    if(cres&0xFFFF)mp_msg(MSGT_MENCODER,MSGL_DBG2,"CompressSequenceFrame returned:%i\n",cres&0xFFFF);
+    if(cres&0xFFFF)mp_msg(MSGT_MENCODER,MSGL_DBG2,"CompressSequenceFrame returned:%i\n",(int)(cres&0xFFFF));
 #if 0
     printf("Size %i->%i   \n",stride*height,compressedsize);
     printf("Ratio: %i:1\n",(stride*height)/compressedsize);
@@ -262,7 +262,7 @@
     muxer_write_chunk(mux_v, compressedsize , similarity?0:0x10);
 
     if(((*desc)->idSize)>MAX_IDSIZE){
-	mp_msg(MSGT_MENCODER,MSGL_ERR,"FATAL! idSize=%d too big, increase MAX_IDSIZE in ve_qtvideo.c!\n",((*desc)->idSize));
+	mp_msg(MSGT_MENCODER,MSGL_ERR,"FATAL! idSize=%ld too big, increase MAX_IDSIZE in ve_qtvideo.c!\n",((*desc)->idSize));
     } else {
 	// according to QT docs, imagedescription may be changed while encoding
 	// a frame (even its size may (and does!) change!)
@@ -319,7 +319,7 @@
     }
     //printf("%i,%i,%i\n",mmioFOURCC('S','V','Q','1'),'SVQ1',bswap_32(mmioFOURCC('S','V','Q','1')));
     cres=InitializeQTML(6+16);
-    mp_msg(MSGT_MENCODER,MSGL_DBG2,"InitializeQTML returned %i\n",cres);
+    mp_msg(MSGT_MENCODER,MSGL_DBG2,"InitializeQTML returned %li\n",cres);
     return 1;
 }
 
diff -urN MPlayer-1.0pre4.orig/libmpdemux/aviprint.c MPlayer-1.0pre4/libmpdemux/aviprint.c
--- MPlayer-1.0pre4.orig/libmpdemux/aviprint.c	2004-03-17 20:50:36 +0600
+++ MPlayer-1.0pre4/libmpdemux/aviprint.c	2004-05-01 23:20:50 +0700
@@ -19,7 +19,7 @@
 //#include "stheader.h"
 
 void print_avih_flags(MainAVIHeader *h){
-  printf("MainAVIHeader.dwFlags: (%ld)%s%s%s%s%s%s\n",h->dwFlags,
+  printf("MainAVIHeader.dwFlags: (%d)%s%s%s%s%s%s\n",h->dwFlags,
     (h->dwFlags&AVIF_HASINDEX)?" HAS_INDEX":"",
     (h->dwFlags&AVIF_MUSTUSEINDEX)?" MUST_USE_INDEX":"",
     (h->dwFlags&AVIF_ISINTERLEAVED)?" IS_INTERLEAVED":"",
@@ -31,28 +31,28 @@
 
 void print_avih(MainAVIHeader *h){
   printf("======= AVI Header =======\n");
-  printf("us/frame: %ld  (fps=%5.3f)\n",h->dwMicroSecPerFrame,1000000.0f/(float)h->dwMicroSecPerFrame);
-  printf("max bytes/sec: %ld\n",h->dwMaxBytesPerSec);
-  printf("padding: %ld\n",h->dwPaddingGranularity);
+  printf("us/frame: %d  (fps=%5.3f)\n",h->dwMicroSecPerFrame,1000000.0f/(float)h->dwMicroSecPerFrame);
+  printf("max bytes/sec: %d\n",h->dwMaxBytesPerSec);
+  printf("padding: %d\n",h->dwPaddingGranularity);
   print_avih_flags(h);
-  printf("frames  total: %ld   initial: %ld\n",h->dwTotalFrames,h->dwInitialFrames);
-  printf("streams: %ld\n",h->dwStreams);
-  printf("Suggested BufferSize: %ld\n",h->dwSuggestedBufferSize);
-  printf("Size:  %ld x %ld\n",h->dwWidth,h->dwHeight);
+  printf("frames  total: %d   initial: %d\n",h->dwTotalFrames,h->dwInitialFrames);
+  printf("streams: %d\n",h->dwStreams);
+  printf("Suggested BufferSize: %d\n",h->dwSuggestedBufferSize);
+  printf("Size:  %d x %d\n",h->dwWidth,h->dwHeight);
   printf("==========================\n");
 }
 
 void print_strh(AVIStreamHeader *h){
   printf("====== STREAM Header =====\n");
   printf("Type: %.4s   FCC: %.4s (%X)\n",(char *)&h->fccType,(char *)&h->fccHandler,(unsigned int)h->fccHandler);
-  printf("Flags: %ld\n",h->dwFlags);
+  printf("Flags: %d\n",h->dwFlags);
   printf("Priority: %d   Language: %d\n",h->wPriority,h->wLanguage);
-  printf("InitialFrames: %ld\n",h->dwInitialFrames);
-  printf("Rate: %ld/%ld = %5.3f\n",h->dwRate,h->dwScale,(float)h->dwRate/(float)h->dwScale);
-  printf("Start: %ld   Len: %ld\n",h->dwStart,h->dwLength);
-  printf("Suggested BufferSize: %ld\n",h->dwSuggestedBufferSize);
-  printf("Quality %ld\n",h->dwQuality);
-  printf("Sample size: %ld\n",h->dwSampleSize);
+  printf("InitialFrames: %d\n",h->dwInitialFrames);
+  printf("Rate: %d/%d = %5.3f\n",h->dwRate,h->dwScale,(float)h->dwRate/(float)h->dwScale);
+  printf("Start: %d   Len: %d\n",h->dwStart,h->dwLength);
+  printf("Suggested BufferSize: %d\n",h->dwSuggestedBufferSize);
+  printf("Quality %d\n",h->dwQuality);
+  printf("Sample size: %d\n",h->dwSampleSize);
   printf("==========================\n");
 }
 
@@ -60,15 +60,15 @@
   printf("======= WAVE Format =======\n");
   printf("Format Tag: %d (0x%X)\n",h->wFormatTag,h->wFormatTag);
   printf("Channels: %d\n",h->nChannels);
-  printf("Samplerate: %ld\n",h->nSamplesPerSec);
-  printf("avg byte/sec: %ld\n",h->nAvgBytesPerSec);
+  printf("Samplerate: %d\n",h->nSamplesPerSec);
+  printf("avg byte/sec: %d\n",h->nAvgBytesPerSec);
   printf("Block align: %d\n",h->nBlockAlign);
   printf("bits/sample: %d\n",h->wBitsPerSample);
   printf("cbSize: %d\n",h->cbSize);
   if(h->wFormatTag==0x55 && h->cbSize>=12){
       MPEGLAYER3WAVEFORMAT* h2=(MPEGLAYER3WAVEFORMAT *)h;
       printf("mp3.wID=%d\n",h2->wID);
-      printf("mp3.fdwFlags=0x%lX\n",h2->fdwFlags);
+      printf("mp3.fdwFlags=0x%X\n",h2->fdwFlags);
       printf("mp3.nBlockSize=%d\n",h2->nBlockSize);
       printf("mp3.nFramesPerBlock=%d\n",h2->nFramesPerBlock);
       printf("mp3.nCodecDelay=%d\n",h2->nCodecDelay);
