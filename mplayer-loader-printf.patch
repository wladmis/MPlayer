--- mplayer-1.0pre4/libmpcodecs/ad_acm.c.loader-printf	Thu Nov  7 00:54:24 2002
+++ mplayer-1.0pre4/libmpcodecs/ad_acm.c	Sun Sep 21 22:52:02 2003
@@ -109,7 +109,7 @@
     //while(srcsize && srcsize<4096) srcsize*=2;
     //while(srcsize>16384) srcsize/=2;
     sh_audio->audio_out_minsize=srcsize; // audio output min. size
-    mp_msg(MSGT_WIN32,MSGL_V,"Audio ACM output buffer min. size: %ld\n",srcsize);
+    mp_msg(MSGT_WIN32,MSGL_V,"Audio ACM output buffer min. size: %d\n",srcsize);
 
     acmStreamSize(priv->handle, srcsize, &srcsize, ACM_STREAMSIZEF_DESTINATION);
 //    if(srcsize<in_fmt->nBlockAlign) srcsize=in_fmt->nBlockAlign;
@@ -116,7 +116,7 @@
 	srcsize = 2*in_fmt->nBlockAlign;
     }
 
-    mp_msg(MSGT_WIN32,MSGL_V,"Audio ACM input buffer min. size: %ld\n",srcsize);
+    mp_msg(MSGT_WIN32,MSGL_V,"Audio ACM input buffer min. size: %d\n",srcsize);
 
     sh_audio->audio_in_minsize=2*srcsize; // audio input min. size
     
@@ -145,7 +145,7 @@
 	case ACMERR_NOTPOSSIBLE:
 	    return;
 	default:
-	    mp_msg(MSGT_WIN32, MSGL_WARN, "ACM_Decoder: unknown error occurred: %d\n", ret);
+	    mp_msg(MSGT_WIN32, MSGL_WARN, "ACM_Decoder: unknown error occurred: %ld\n", ret);
 	    return;
     }
     
@@ -181,7 +181,7 @@
     acm_context_t *priv = sh_audio->context;
 
     acmStreamSize(priv->handle, len, &srcsize, ACM_STREAMSIZEF_DESTINATION);
-    mp_msg(MSGT_WIN32,MSGL_DBG3,"acm says: srcsize=%ld  (buffsize=%d)  out_size=%d\n",srcsize,sh_audio->a_in_buffer_size,len);
+    mp_msg(MSGT_WIN32,MSGL_DBG3,"acm says: srcsize=%d  (buffsize=%d)  out_size=%d\n",srcsize,sh_audio->a_in_buffer_size,len);
 
     if(srcsize<sh_audio->wf->nBlockAlign){
        srcsize=sh_audio->wf->nBlockAlign;
--- mplayer-20030921/libmpcodecs/vd_vfw.c.loader-printf	Thu Nov  7 00:54:24 2002
+++ mplayer-20030921/libmpcodecs/vd_vfw.c	Sun Sep 21 22:59:15 2003
@@ -268,14 +268,14 @@
 #endif
     if (ret)
     {
-	mp_msg(MSGT_WIN32, MSGL_WARN, "ICDecompressEnd failed: %d\n", ret);
+	mp_msg(MSGT_WIN32, MSGL_WARN, "ICDecompressEnd failed: %ld\n", ret);
 	return;
     }
 
     ret = ICClose(priv->handle);
     if (ret)
     {
-	mp_msg(MSGT_WIN32, MSGL_WARN, "ICClose failed: %d\n", ret);
+	mp_msg(MSGT_WIN32, MSGL_WARN, "ICClose failed: %ld\n", ret);
 	return;
     }
     
@@ -316,7 +316,7 @@
 	   sh->bih, data, priv->o_bih, (flags&3) ? 0 : mpi->planes[0]);
 
     if ((int)ret){
-      mp_msg(MSGT_DECVIDEO,MSGL_WARN,"Error decompressing frame, err=%d\n",ret);
+      mp_msg(MSGT_DECVIDEO,MSGL_WARN,"Error decompressing frame, err=%ld\n",ret);
       return NULL;
     }
     
--- mplayer-20030921/loader/qtx/qtxsdk/components.h.loader-printf	Sun Sep 21 22:34:14 2003
+++ mplayer-20030921/loader/qtx/qtxsdk/components.h	Sun Sep 21 22:34:14 2003
@@ -634,14 +634,14 @@
 
 
     printf("=============== ImageDescription at %p ==================\n",xxx);
-    printf("idSize=0x%X  fourcc=0x%08X\n",id->idSize,id->cType);
-    printf("ver=%d rev=%d vendor=0x%08X\n",id->version,id->revisionLevel,id->vendor);
-    printf("tempQ=%d spatQ=%d  dim: %d x %d  dpi: %d x %d  depth: %d\n",
+    printf("idSize=0x%lX  fourcc=0x%08X\n",id->idSize,id->cType);
+    printf("ver=%d rev=%d vendor=0x%08lX\n",id->version,id->revisionLevel,id->vendor);
+    printf("tempQ=%ld spatQ=%ld  dim: %d x %d  dpi: %ld x %ld  depth: %d\n",
 	id->temporalQuality,id->spatialQuality,
 	id->width, id->height,
 	id->hRes, id->vRes,
 	id->depth);
-    printf("dataSize=%d frameCount=%d clutID=%d\n",id->dataSize, id->frameCount, id->clutID);
+    printf("dataSize=%ld frameCount=%d clutID=%d\n",id->dataSize, id->frameCount, id->clutID);
     printf("name='%.*s'\n",((char*)(&id->name))[0],((char*)(&id->name))+1);
     x=((char*)(&id->clutID))+2;
     if(id->idSize>sizeof(ImageDescription)){
@@ -657,7 +657,7 @@
 }
 
 static inline void dump_MatrixRecord(char* title, MatrixRecord *m){
-    printf("%s: [%d %d %d][%d %d %d][%d %d %d]\n",title,
+    printf("%s: [%ld %ld %ld][%ld %ld %ld][%ld %ld %ld]\n",title,
 	m->matrix[0][0],m->matrix[0][1],m->matrix[0][2],
 	m->matrix[1][0],m->matrix[1][1],m->matrix[1][2],
 	m->matrix[2][0],m->matrix[2][1],m->matrix[2][2]);
@@ -668,9 +668,9 @@
     printf("=============== PixMap at %p ==================\n",xxx);
     printf("base=%p  stride=%d\n",p->baseAddr, p->rowBytes);
     dump_Rect("bounds",&p->bounds);
-    printf("pmVersion=0x%X packType=0x%X\n packSize=0x%X\n",
+    printf("pmVersion=0x%X packType=0x%X\n packSize=0x%lX\n",
 	p->pmVersion,p->packType, p->packSize);
-    printf("hRes=0x%X vRes=0x%X pixelType=0x%X pixelSize=0x%X\n",
+    printf("hRes=0x%lX vRes=0x%lX pixelType=0x%X pixelSize=0x%X\n",
 	p->hRes,p->vRes,p->pixelType,p->pixelSize);
     printf("cmpCount=0x%X cmpSize=0x%X pixelFormat=0x%X\n",
 	p->cmpCount,p->cmpSize,p->pixelFormat);
@@ -682,11 +682,11 @@
     CodecCapabilities* cc=xxx;
     if(!xxx) return;
     printf("=============== CodecCapabilities at %p =================\n",xxx);
-    printf("flags=0x%X  flags2=0x%X\n",cc->flags,cc->flags2);
+    printf("flags=0x%lX  flags2=0x%lX\n",cc->flags,cc->flags2);
     printf("wantedPixelSize=%d extendWidth=%d extendHeight=%d band=%d+%d\n",
 	cc->wantedPixelSize,cc->extendWidth,cc->extendHeight,
 	cc->bandMin,cc->bandInc);
-    printf("pad=0x%X  time=0x%X\n",cc->pad,cc->time);
+    printf("pad=0x%X  time=0x%lX\n",cc->pad,cc->time);
     printf("=========================================================\n");
 }
 
@@ -696,7 +696,7 @@
     int i;
     if(!xxx) return;
     printf("=============== CodecDecompressParams at %p ==================\n",xxx);
-    printf("sequenceID=%d\n",cd->sequenceID);
+    printf("sequenceID=%ld\n",cd->sequenceID);
     idh=cd->imageDescription;
     if(idh && idh[0]) dump_ImageDescription(idh[0]);
     
@@ -706,8 +706,8 @@
     }
     printf("\n");
     
-    printf("data=%p  size=%d\n",cd->data,cd->bufferSize);
-    printf("frameno=%d  lines: %d .. %d   condflags=0x%X  callerflags=0x%X\n",
+    printf("data=%p  size=%ld\n",cd->data,cd->bufferSize);
+    printf("frameno=%ld  lines: %ld .. %ld   condflags=0x%lX  callerflags=0x%X\n",
 	cd->frameNumber, cd->startLine, cd->stopLine, cd->conditionFlags,cd->callerFlags);
 //    printf("maskBits=%p mattePixMap=%p\n",
 //	cd->maskBits,cd->mattePixMap);
@@ -715,21 +715,21 @@
 //    if(cd->mattePixMap) dump_PixMap(cd->mattePixMap);
     if(cd->matrix) dump_MatrixRecord("matrix",cd->matrix);
     if(cd->capabilities) dump_CodecCapabilities(cd->capabilities);
-    printf("accuracy=%d  transferMode=%d  matrixFlags=0x%X matrixType=%d\n",
-	(int)cd->accuracy, (int)cd->transferMode, (int)cd->matrixFlags, (int)cd->matrixType);
+    printf("accuracy=%ld  transferMode=%d  matrixFlags=0x%X matrixType=%d\n",
+	cd->accuracy, cd->transferMode, cd->matrixFlags, cd->matrixType);
     printf("srcrect: %d;%d - %d;%d\n",cd->srcRect.top,cd->srcRect.left,cd->srcRect.bottom,cd->srcRect.right);
     printf("dstrect: %d;%d - %d;%d\n",cd->dstRect.top,cd->dstRect.left,cd->dstRect.bottom,cd->dstRect.right);
     printf("wantedDestinationPixelTypes=%p\n",cd->wantedDestinationPixelTypes);
     if(cd->wantedDestinationPixelTypes){
-	unsigned int* p=cd->wantedDestinationPixelTypes;
+	int** p=cd->wantedDestinationPixelTypes;
 	while(p[0]){
-	    printf("  0x%08X %.4s\n",p[0],&p[0]);
+	    printf("  %p %.4s\n",p[0],(char *)&p[0]);
 	    ++p;
 	}
     }
-    printf("screenFloodMethod=%d value=%d  preferredOffscreenPixelSize=%d\n",
+    printf("screenFloodMethod=%ld value=%ld  preferredOffscreenPixelSize=%d\n",
 	cd->screenFloodMethod, cd->screenFloodValue, cd->preferredOffscreenPixelSize);
-    printf("callbacks: progress=%p compl=%p data=%p ftime=%p srcdata=%p sync=%p\n",
+    printf("callbacks: progress=%#llx compl=%#llx data=%#llx ftime=%p srcdata=%p sync=%p\n",
      cd->progressProcRecord, cd->completionProcRecord,
      cd->dataProcRecord, cd->frameTime, cd->sourceData, cd->syncFrameTime);
 //    printf("\n");
--- mplayer-20030921/loader/dshow/DS_Filter.c.loader-printf	Sun Sep 21 22:34:14 2003
+++ mplayer-20030921/loader/dshow/DS_Filter.c	Sun Sep 21 22:34:14 2003
@@ -261,7 +261,7 @@
     if (!init)
     {
 	DS_Filter_Destroy(This);
-	printf("Warning: DS_Filter() %s.  (DLL=%.200s, r=0x%x)\n", em, dllname, result);
+	printf("Warning: DS_Filter() %s.  (DLL=%.200s, r=0x%lx)\n", em, dllname, result);
         This = 0;
     }
     return This;
--- mplayer-20030921/loader/module.c.loader-printf	Sun Sep 21 22:34:14 2003
+++ mplayer-20030921/loader/module.c	Sun Sep 21 22:34:14 2003
@@ -322,7 +322,7 @@
 	}
 
 
-	WARN("Failed to load module '%s'; error=0x%08lx, \n", libname, GetLastError());
+	WARN("Failed to load module '%s'; error=0x%08x, \n", libname, GetLastError());
 	return NULL;
 }
 
--- mplayer-20030921/loader/pe_image.c.loader-printf	Fri Sep 13 21:43:13 2002
+++ mplayer-20030921/loader/pe_image.c	Sun Sep 21 22:34:14 2003
@@ -81,7 +81,7 @@
 
   Module = (char*)RVA(pe_exports->Name);
   TRACE("*******EXPORT DATA*******\n");
-  TRACE("Module name is %s, %ld functions, %ld names\n", 
+  TRACE("Module name is %s, %d functions, %d names\n", 
         Module, pe_exports->NumberOfFunctions, pe_exports->NumberOfNames);
 
   ordinal=(u_short*) RVA(pe_exports->AddressOfNameOrdinals);
@@ -94,7 +94,7 @@
       if (!*function) continue;  
       if (TRACE_ON(win32))
       {
-	DPRINTF( "%4ld %08lx %p", i + pe_exports->Base, *function, RVA(*function) );
+	DPRINTF( "%4d %08lx %p", i + pe_exports->Base, *function, RVA(*function) );
 	
 	for (j = 0; j < pe_exports->NumberOfNames; j++)
           if (ordinal[j] == i)
@@ -200,7 +200,7 @@
  found:
         if (ordinal >= exports->NumberOfFunctions)
         {
-            TRACE("	ordinal %ld out of range!\n", ordinal + exports->Base );
+            TRACE("	ordinal %d out of range!\n", ordinal + exports->Base );
             return NULL;
         }
         addr = function[ordinal];
@@ -346,7 +346,7 @@
     TRACE("   Name    VSz  Vaddr     SzRaw   Fileadr  *Reloc *Lineum #Reloc #Linum Char\n");
     for (i = 0; i< PE_HEADER(hModule)->FileHeader.NumberOfSections; i++)
     {
-        TRACE("%8s: %4.4lx %8.8lx %8.8lx %8.8lx %8.8lx %8.8lx %4.4x %4.4x %8.8lx\n", 
+        TRACE("%8s: %4.4x %8.8x %8.8x %8.8x %8.8x %8.8x %4.4x %4.4x %8.8x\n", 
                       pe_seg->Name, 
                       pe_seg->Misc.VirtualSize,
                       pe_seg->VirtualAddress,
@@ -378,7 +378,7 @@
 		char *page = (char*) RVA(r->VirtualAddress);
 		int count = (r->SizeOfBlock - 8)/2;
 		int i;
-		TRACE_(fixup)("%x relocations for page %lx\n",
+		TRACE_(fixup)("%x relocations for page %x\n",
 			count, r->VirtualAddress);
 		
 		for(i=0;i<count;i++)
@@ -454,7 +454,7 @@
                                     0, 0, NULL );
     if (!mapping)
     {
-        WARN("CreateFileMapping error %ld\n", GetLastError() );
+        WARN("CreateFileMapping error %d\n", GetLastError() );
         return 0;
     }
 //    hModule = (HMODULE)MapViewOfFile( mapping, FILE_MAP_READ, 0, 0, 0 );
@@ -462,7 +462,7 @@
 //    CloseHandle( mapping );
     if (!hModule)
     {
-        WARN("MapViewOfFile error %ld\n", GetLastError() );
+        WARN("MapViewOfFile error %d\n", GetLastError() );
         return 0;
     }
     if ( *(WORD*)hModule !=IMAGE_DOS_SIGNATURE)
@@ -476,7 +476,7 @@
     
     if ( nt->Signature != IMAGE_NT_SIGNATURE )
     {
-        WARN("%s image doesn't have PE signature, but 0x%08lx\n", filename, nt->Signature );
+        WARN("%s image doesn't have PE signature, but 0x%08x\n", filename, nt->Signature );
         goto error;
     }
 
@@ -524,7 +524,7 @@
     
     aoep = nt->OptionalHeader.AddressOfEntryPoint;
     if (aoep && (aoep < lowest_va))
-        FIXME("VIRUS WARNING: '%s' has an invalid entrypoint (0x%08lx) "
+        FIXME("VIRUS WARNING: '%s' has an invalid entrypoint (0x%08x) "
                       "below the first virtual address (0x%08x) "
                       "(possibly infected by Tchernobyl/SpaceFiller virus)!\n",
                        filename, aoep, lowest_va );
@@ -599,9 +599,9 @@
 	}
     }
 
-    TRACE("Load addr is %lx (base %lx), range %x\n",
+    TRACE("Load addr is %x (base %x), range %x\n",
           load_addr, nt->OptionalHeader.ImageBase, vma_size );
-    TRACE_(segment)("Loading %s at %lx, range %x\n",
+    TRACE_(segment)("Loading %s at %x, range %x\n",
                     filename, load_addr, vma_size );
 
 #if 0
@@ -628,7 +628,7 @@
     for (i = 0; i < nt->FileHeader.NumberOfSections; i++, pe_sec++)
     {
         if (!pe_sec->SizeOfRawData || !pe_sec->PointerToRawData) continue;
-        TRACE("%s: mmaping section %s at %p off %lx size %lx/%lx\n",
+        TRACE("%s: mmaping section %s at %p off %x size %x/%x\n",
               filename, pe_sec->Name, (void*)RVA(pe_sec->VirtualAddress),
               pe_sec->PointerToRawData, pe_sec->SizeOfRawData, pe_sec->Misc.VirtualSize );
         if ((void*)FILE_dommap( unix_handle, (void*)RVA(pe_sec->VirtualAddress),
@@ -923,7 +923,7 @@
 	if(entry==NULL)
 	    entry = (void*)RVA_PTR( wm->module,OptionalHeader.AddressOfEntryPoint );
         
-	TRACE_(relay)("CallTo32(entryproc=%p,module=%08x,type=%ld,res=%p)\n",
+	TRACE_(relay)("CallTo32(entryproc=%p,module=%08x,type=%d,res=%p)\n",
                        entry, wm->module, type, lpReserved );
 	
 	
--- mplayer-20030921/loader/ext.c.loader-printf	Fri Sep 13 21:43:13 2002
+++ mplayer-20030921/loader/ext.c	Sun Sep 21 22:34:14 2003
@@ -505,7 +505,7 @@
     if(answer==(void*)-1)
     {
 	printf("Error no %d\n", errno);
-	printf("VirtualAlloc(0x%p, %ld) failed\n", address, size);
+	printf("VirtualAlloc(0x%p, %d) failed\n", address, size);
 	return NULL;
     }
     else
--- mplayer-20030921/loader/resource.c.loader-printf	Fri Sep 13 21:43:13 2002
+++ mplayer-20030921/loader/resource.c	Sun Sep 21 22:34:14 2003
@@ -397,7 +397,7 @@
     PMESSAGE_RESOURCE_ENTRY	mre;
     int		i,slen;
 
-    TRACE("instance = %08lx, id = %08lx, buffer = %p, length = %ld\n", (DWORD)instance, (DWORD)id, buffer, (DWORD)buflen);
+    TRACE("instance = %08x, id = %08x, buffer = %p, length = %d\n", (DWORD)instance, (DWORD)id, buffer, (DWORD)buflen);
 
     /*FIXME: I am not sure about the '1' ... But I've only seen those entries*/
     hrsrc = FindResourceExW(instance,RT_MESSAGELISTW,(LPWSTR)1,lang);
--- mplayer-20030921/loader/win32.c.loader-printf	Sun Sep 21 22:34:14 2003
+++ mplayer-20030921/loader/win32.c	Sun Sep 21 22:34:14 2003
@@ -1032,7 +1032,7 @@
 		    }
 		}
 		/* set the CPU type of the current processor */
-		sprintf(buf,"CPU %ld",cachedsi.dwProcessorType);
+		sprintf(buf,"CPU %d",cachedsi.dwProcessorType);
 		continue;
 	    }
 	    /* old 2.0 method */
@@ -1059,7 +1059,7 @@
 		    }
 		}
 		/* set the CPU type of the current processor */
-		sprintf(buf,"CPU %ld",cachedsi.dwProcessorType);
+		sprintf(buf,"CPU %d",cachedsi.dwProcessorType);
 		continue;
 	    }
 	    if (!lstrncmpiA(line,"fdiv_bug",strlen("fdiv_bug"))) {
@@ -4451,7 +4451,7 @@
 
 static void WINAPI expExitProcess( DWORD status )
 {
-    printf("EXIT - code %ld\n",status);
+    printf("EXIT - code %d\n",status);
     exit(status);
 }
 
